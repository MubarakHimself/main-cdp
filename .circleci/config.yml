

jobs:
  setup-rdp-ssh:
    docker:
      - image: ubuntu:20.04
    environment:
      NGROK_AUTH_TOKEN: $NGROK_AUTH_TOKEN  # Set in CircleCI project settings
    steps:
      - checkout
      - run:
          name: Install Dependencies
          command: |
            sudo apt-get update
            sudo apt-get install -y wget unzip curl jq xrdp openssh-server
      - run:
          name: Configure SSH and RDP
          command: |
            # Set SSH password (replace "circleci" with a stronger password)
            echo "root:circleci" | sudo chpasswd
            sudo sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/g' /etc/ssh/sshd_config
            sudo service ssh start
            sudo service xrdp start
      - run:
          name: Install Ngrok
          command: |
            wget -q https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-linux-amd64.zip
            unzip ngrok-v3-stable-linux-amd64.zip
            sudo mv ngrok /usr/local/bin/
            rm ngrok-v3-stable-linux-amd64.zip
      - run:
          name: Authenticate Ngrok
          command: ngrok config add-authtoken "$NGROK_AUTH_TOKEN"
      - run:
          name: Start Ngrok Tunnels
          command: |
            ngrok tcp 3389 --log=stdout > /tmp/ngrok-rdp.log &
            ngrok tcp 22 --log=stdout > /tmp/ngrok-ssh.log &
            sleep 10  # Allow time for tunnels to initialize
            RDP_URL=$(curl -s http://localhost:4040/api/tunnels | jq -r '.tunnels[] | select(.proto == "tcp" and .config.addr == "3389") | .public_url')
            SSH_URL=$(curl -s http://localhost:4040/api/tunnels | jq -r '.tunnels[] | select(.proto == "tcp" and .config.addr == "22") | .public_url')
            echo "RDP URL: $RDP_URL"
            echo "SSH URL: $SSH_URL"



jobs:
  build:
    docker:
      - image: cimg/go:1.17
    resource_class: xlarge
    steps:
      - checkout
      # ... steps for building/testing app ...

      - setup_remote_docker:
          docker_layer_caching: true

      # build and push Docker image
      - run: |
          TAG=0.1.$CIRCLE_BUILD_NUM
          docker build -t CircleCI-Public/circleci-demo-docker:$TAG .
          echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
          docker push CircleCI-Public/circleci-demo-docker:$TAG